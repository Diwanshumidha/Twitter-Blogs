generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Blog          Blog[]
  likes         Like[]
  Comment       Comment[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(uuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Blog {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  content   String
  poster    String
  createdAt DateTime @default(now())
  Role      Role     @default(USER)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
  likes    Like[]
}

enum Role {
  ADMIN
  USER
}

model Comment {
  id      String @id @default(uuid()) @map("_id")
  comment String

  Blog   Blog   @relation(fields: [blogid], references: [id])
  blogid String

  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

model Like {
  id     String @id @default(uuid()) @map("_id")
  userId String @map("user_id")
  blogId String @map("blog_id")
  user   User   @relation(fields: [userId], references: [id])
  blog   Blog   @relation(fields: [blogId], references: [id])

  @@map("likes")
}
